{"/home/travis/build/npmtest/node-npmtest-smtp-protocol/test.js":"/* istanbul instrument in package npmtest_smtp_protocol */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/lib.npmtest_smtp_protocol.js":"/* istanbul instrument in package npmtest_smtp_protocol */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_smtp_protocol = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_smtp_protocol = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-smtp-protocol && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_smtp_protocol */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_smtp_protocol\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_smtp_protocol.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_smtp_protocol.rollup.js'] =\n            local.assetsDict['/assets.npmtest_smtp_protocol.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_smtp_protocol.__dirname + '/lib.npmtest_smtp_protocol.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/index.js":"var net = require('net');\nvar tls = require('tls');\n\nvar proto = exports.protocol = {\n    client : require('./lib/client/proto'),\n    server : require('./lib/server/proto'),\n};\n\nexports.createServer = function (opts, cb) {\n    if (typeof opts === 'string') {\n        opts = { domain: opts };\n    }\n    if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};;\n    }\n    if (!opts) opts = {};\n    var istls = Boolean(opts.tls);\n    var tnet = istls ? tls : net;\n    \n    return tnet.createServer(opts, function (stream) {\n        var req = proto.client(opts, stream);\n        var clienttls = istls;\n        \n        req.on('error', function () {});\n        stream.on('error', function (err) {});\n        \n        req.on('_tlsNext', function (write, next) {\n            if (clienttls) {\n                write(220, 'Already using TLS?');\n                //write(503, 'Bad sequence: already using TLS.');\n                return next();\n            }\n            clienttls = true;\n            \n            var tserver = tls.createServer(opts);\n            tserver.listen(0, '127.0.0.1', function () {\n                var s = net.connect(tserver.address().port, '127.0.0.1');\n                s.on('error', function (err) { stream.end() });\n                s.pipe(stream).pipe(s);\n                write(220, 'Ready to start TLS.');\n            });\n            \n            var index = 0;\n            tserver.on('secureConnection', function (sec) {\n                if (index ++ > 0) return sec.end();\n                req._swapStream(sec);\n                req.emit('tls', sec);\n            });\n            stream.on('close', function () {\n                tserver.close();\n            });\n        });\n        cb(req);\n    });\n};\n\nexports.connect = function () {\n    var args = [].slice.call(arguments).reduce(function (acc, arg) {\n        acc[typeof arg] = arg;\n        return acc;\n    }, {});\n\n    var stream;\n    var cb = args.function;\n    var options = args.object || {};\n    \n    var tlsOpts = options.tls;\n    options.port = args.number || 25;\n    options.host = args.string || 'localhost';\n    \n    if (args.string && args.string.match(/^[.\\/]/)) {\n        // unix socket\n        stream = net.createConnection(args.string);\n    }\n    else if (tlsOpts) {\n        stream = tls.connect(options.port, options.host, tlsOpts, function () {\n            var pending = stream.listeners('secure').length;\n            var allOk = true;\n            if (pending === 0 && !stream.authorized\n            && tlsOpts.rejectUnauthorized !== false) {\n                allOk = false;\n            }\n            if (pending === 0) return done()\n            \n            var ack = {\n                accept : function (ok) {\n                    allOk = allOk && (ok !== false);\n                    if (--pending === 0) done();\n                },\n                reject : function () {\n                    allOk = false;\n                    if (--pending === 0) done();\n                }\n            };\n            stream.emit('secure', ack);\n            \n            function done () {\n                if (!allOk) {\n                    stream.end();\n                    stream.emit('error', new Error(stream.authorizationError));\n                }\n                else cb(proto.server(stream));\n            }\n        });\n    }\n    else if (options.stream) {\n        cb(proto.server(options.stream));\n    }\n    else {\n        stream = net.connect(options);\n        stream.on('connect', function () {\n            cb(proto.server(stream));\n        });\n    }\n    \n    return stream;\n};\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/client/proto.js":"var parser = require('./parser.js');\nvar writer = require('../write.js');\nvar through = require('through');\nvar os = require('os');\nvar EventEmitter = require('events').EventEmitter;\nvar undot = require('../dot.js').undot;\n\nmodule.exports = function (opts, stream) {\n    if (stream === undefined) {\n        stream = opts;\n        opts = {};\n    }\n    if (!opts) opts = {};\n    \n    var p = parser(stream);\n    var write = writer(stream);\n    write(220, opts.domain || os.hostname());\n    \n    function createAck (cb, okCode, raw) {\n        return {\n            accept : function (code, msg) {\n                write(code, msg || \"OK\", okCode || 250);\n                if (cb) cb();\n                if (!raw) next();\n            },\n            reject : function (code, msg) {\n                write(code, msg, 500);\n                next();\n            }\n        };\n    }\n    \n    function emit (name, x) {\n        var fn = arguments[arguments.length - 1];\n        var ack = arguments[arguments.length - 1] = createAck(fn);\n        if (req.listeners(name).length === 0) {\n            if (name === 'greeting' && x.greeting === 'ehlo') {\n                ack.accept(250, [ x.hostname || remoteIp, 'STARTTLS' ]);\n            }\n            else if (name === 'greeting') {\n                ack.accept(250, x.hostname);\n            }\n            else ack.accept();\n        }\n        req.emit.apply(req, arguments);\n    }\n    \n    var req = new EventEmitter;\n    req._swapStream = function (s) {\n        write = writer(s);\n        p = parser(s);\n        stream = s;\n        s.on('error', req.emit.bind(req, 'error'));\n        next();\n    };\n    \n    stream.on('error', req.emit.bind(req, 'error'));\n    req.socket = stream;\n    var remoteIp = stream.remoteAddress || 'unknown';\n    \n    var next = (function next () {\n        p.getCommand(function (err, cmd) {\n            if (err) {\n                if (err.code) write(err.code, err.message || err.toString())\n                else write(501, err.message || err.toString())\n                return next();\n            }\n            var prevented = false;\n            req.emit('command', cmd, {\n                preventDefault: function () { prevented = true },\n                write: write,\n                next: next\n            });\n            if (prevented) return;\n            \n            if (cmd.name === 'quit') {\n                write(221, 'Bye!');\n                req.emit('quit');\n                stream.end();\n            }\n            else if (cmd.name === 'rset') {\n                write(250);\n                req.to = undefined;\n                req.from = undefined;\n                req.emit('rset');\n                next();\n            }\n            else if (!req.greeting) {\n                if (cmd.name === 'greeting') {\n                    emit('greeting', cmd, function () {\n                        req.greeting = cmd.greeting;\n                        req.hostname = cmd.hostname;\n                    });\n                }\n                else {\n                    write(503, 'Bad sequence: HELO, EHLO, or LHLO expected.');\n                    next();\n                }\n            }\n            else if (cmd.name === 'mail') {\n                emit('from', cmd.from, function () {\n                    req.fromExt = cmd.ext;\n                    req.from = cmd.from;\n                });\n            }\n            else if (cmd.name === 'rcpt') {\n                emit('to', cmd.to, function () {\n                    if (req.toExt == undefined) {\n                        req.toExt = [];\n                    }\n                    req.toExt.push(cmd.ext);\n                    if (req.to == undefined) {\n                        req.to = [];\n                    }\n                    req.to.push(cmd.to);\n\n                });\n            }\n            else if (cmd.name === 'data') {\n                if (!req.from) {\n                    write(503, 'Bad sequence: MAIL expected');\n                    next();\n                }\n                else if (!req.to) {\n                    write(503, 'Bad sequence: RCPT expected');\n                    next();\n                }\n                else {\n                    var target = makeTarget(write, next, emit);\n                    var messageAck = createAck(function () {\n                        p.getUntil('.', undot(target));\n                    }, 354, true);\n                    req.emit('message', target, messageAck);\n                }\n            }\n            else if (cmd.name === 'starttls') {\n                req.emit('_tlsNext', write, next);\n                req.greeting = null;\n            }\n            else if (cmd.recognized === false) {\n                write(500, 'Unrecognized command.');\n                next();\n            }\n            else {\n                write(502, 'Not implemented.');\n                next();\n            }\n        });\n        \n        return next;\n    })();\n    \n    return req;\n};\n\nfunction makeTarget (write, next, emit) {\n    var target = through(write, end);\n    target.aborted = false;\n    \n    target.abort = function (code, msg) {\n        if (!msg && typeof code !== 'number') {\n            msg = code;\n            code = undefined;\n        }\n        if (code === undefined) code = 554\n        \n        target.readable = false;\n        target.emit('abort', code, msg);\n    };\n    \n    return target;\n    \n    function write (buf) {\n        if (!this.aborted) this.queue(buf);\n    }\n    \n    function end () {\n        this.queue(null);\n        \n        if (this.aborted) {\n            write(target.aborted.code, target.aborted.message);\n            next();\n        }\n        else emit('received', function () {});\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/client/parser.js":"module.exports = function (stream) {\n    return new ClientParser(stream);\n};\n\nfunction ClientParser (stream) {\n    var self = this;\n    self.stream = stream;\n    self.lines = [];\n    self.queue = [];\n    \n    self.parseData(function (line) {\n        if (self.queue.length) {\n            self.queue.shift()(line);\n        }\n        else {\n            self.lines.push(line);\n        }\n    });\n}\n\nClientParser.prototype = require('../parse_data');\n\nClientParser.prototype.getLine = function (cb) {\n    this.queue.push(cb);\n};\n\nClientParser.prototype.getUntil = function getUntil (terminal, target) {\n    var self = this;\n    self.getLine(function getLine (line) {\n        if (line === terminal) target.end()\n        else {\n            target.write(line + '\\r\\n');\n            self.getLine(getLine);\n        }\n    });\n};\n\nClientParser.prototype.getCommand = function (cb) {\n    this.getLine(function (line) {\n        var m = line.match(/^(\\S+)(?:\\s+(.*))?$/);\n        if (!m) cb('syntax error')\n        else {\n            var cmd = parse(m[1].toLowerCase(), m[2]);\n            if (cmd instanceof Error) cb(cmd)\n            else cb(null, cmd)\n        }\n    });\n};\n\nfunction parse (cmd, data) {\n    var res = { name : cmd, data : data };\n    \n    switch (cmd) {\n        case 'helo' :\n        case 'ehlo' :\n        case 'lhlo' :\n            res.name = 'greeting';\n            res.greeting = cmd;\n            res.hostname = data;\n            break;\n        \n        case 'mail' :\n            if (!data) return error(501, 'incomplete mail command');\n            \n            var m = data.match(/^from\\s*:\\s*(\\S+)(?:\\s+(.*))?/i);\n            if (!m) return error(501, 'parse error in mail command');\n            res.from = m[1].replace(/^</, '').replace(/>$/, '');\n            res.ext = m[2];\n            \n            break;\n        \n        case 'rcpt' :\n            if (!data) return error(501, 'incomplete rcpt command');\n            \n            var m = data.match(/^to\\s*:\\s*(\\S+)(?:\\s+(.*))?/i);\n            if (!m) return error(501, 'parse error in rcpt command');\n            res.to = m[1].replace(/^</, '').replace(/>$/, '');\n            res.ext = m[2];\n            \n            break;\n        \n        case 'quit' :\n        case 'data' :\n            break;\n        \n        case 'rset' :\n        case 'send' :\n        case 'soml' :\n        case 'saml' :\n        case 'vrfy' :\n        case 'expn' :\n        case 'help' :\n        case 'noop' :\n        case 'turn' :\n        case 'starttls' :\n            break;\n        \n        default :\n            res.recognized = false;\n            break;\n    }\n    return res;\n}\n\nfunction error (code, msg) {\n    var err = new Error(msg);\n    err.code = code;\n    return err;\n}\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/parse_data.js":"exports.parseData = function (cb) {\n    var self = this;\n    var bufs = [];\n    \n    self.stream.on('data', function ondata (buf, offset) {\n        if (offset === undefined) offset = 0;\n        \n        if (self.bytes) {\n            var ix = Math.min(buf.length, offset + self.bytes);\n            var chunk = buf.slice(offset, ix);\n            self.target.write(chunk);\n            \n            self.bytes -= chunk.length;\n            if (self.bytes === 0) {\n                if (buf.length > offset + chunk.length) {\n                    ondata(buf, offset + chunk.length);\n                }\n                self.target.end();\n            }\n        }\n        else {\n            for (var i = offset; i < buf.length; i++) {\n                if (buf[i] === 10) {\n                    if (i > offset) bufs.push(buf.slice(offset, i));\n                    cb(Buffer.concat(bufs).toString('utf8').replace(/\\r$/, ''));\n                    bufs = [];\n                    if (buf.length > i + 1) ondata(buf, i + 1);\n                    return;\n                }\n            }\n            if (offset < buf.length) {\n                bufs.push(buf.slice(offset, buf.length));\n            }\n        }\n    });\n}\n\nexports.getBytes = function (n, target) {\n    this.bytes = n;\n    this.target = target;\n};\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/write.js":"module.exports = function (stream) {\n    return function (code, lines, defaultCode) {\n        if (typeof code === 'string' && code.match(/^\\d+$/)) {\n            code = parseInt(code, 10);\n        }\n        else if (typeof code !== 'number' && !lines) {\n            lines = code;\n            code = undefined;\n        }\n        if (code === undefined) code = defaultCode;\n        \n        if (lines === undefined) lines = [];\n        if (lines.length === 0) lines = [ '' ];\n        \n        if (typeof lines === 'string') lines = [ lines ];\n        lines = lines.reduce(function (acc, line) {\n            return acc.concat(line.split(/\\r?\\n/));\n        }, []);\n        \n        lines.forEach(function (line, i) {\n            var blank = line.length === 0 ? '' : ' ';\n            stream.write(\n                code\n                + (i === lines.length - 1 ? blank : '-')\n                + line\n                + '\\r\\n'\n            );\n        });\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/dot.js":"var through = require('through');\nvar combine = require('stream-combiner');\n\nexports.dot = function (source) {\n    var first = true;\n    var dot = through(function (buf) {\n        var data = buf.toString();\n        var s = first\n            ? data.replace(/(^|\\n)\\./g, '$1..')\n            : data.replace(/\\n\\./g, '\\n..')\n        ;\n        first = data.charCodeAt(data.length - 1) === 10;\n        this.queue(s);\n    });\n    source.pipe(dot);\n    return dot;\n};\n\nexports.undot = function (target) {\n    var first = true;\n    var dot = through(function (data) {\n        var s = first\n            ? data.replace(/(^|\\n)\\.\\./g, '$1.')\n            : data.replace(/\\n\\.\\./g, '\\n.')\n        ;\n        first = data.charCodeAt(data.length - 1) === 10;\n        this.queue(s);\n    });\n    return combine(dot, target);\n};\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/server/proto.js":"var parser = require('./parser');\nvar EventEmitter = require('events').EventEmitter;\nvar dot = require('../dot.js').dot;\nvar crypto = require('crypto');\nvar util = require('util');\nvar through = require('through');\nvar copy = require('shallow-copy');\nvar tls = require('tls');\n\nmodule.exports = function (stream) {\n    return new Client(stream);\n};\n\nfunction Client (stream) {\n    EventEmitter.call(this);\n    var self = this;\n    self.stream = stream;\n    self.queue = [\n        function (err, code, lines) {\n            if (err) self.emit('error', err);\n            else {\n                self.greeting = [code, lines];\n                self.emit('greeting', code, lines)\n            }\n        }\n    ];\n    self._writeQueue = [];\n    \n    parser(stream, function (err, code, lines) {\n        if (!self.queue.length) return;\n        \n        var cb = self.queue.shift();\n        if (cb) cb(err, code, lines);\n        \n        self._nextWrite();\n    });\n    \n    self.on('newListener', function(event, listener) {\n\n        if (event === 'greeting' && this.greeting) {\n            listener(this.greeting[0], this.greeting[1])\n        }\n\n    });\n\n    return self;\n}\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype._nextWrite = function next () {\n    var self = this;\n    \n    if (!self._writeQueue.length) return;\n    var r = self._writeQueue.shift();\n    var msg = r[0];\n    if (msg && typeof msg === 'object'\n    && typeof msg.pipe === 'function') {\n        msg.on('data', function () {});\n        msg.on('end', next);\n        msg.pipe(self.stream, { end: false });\n        msg.resume();\n    }\n    else {\n        self.stream.write(msg);\n        if (r[1]) next();\n    }\n};\n\nClient.prototype._write = function (msg, cb) {\n    this._writeQueue.push([ msg, !cb ]);\n    if (cb) this.queue.push(cb);\n    this._nextWrite();\n};\n\nClient.prototype.login = function (username, password, type, cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    var supportedTypes =  ['PLAIN','LOGIN','CRAM-MD5'];\n    type = (type) ? type.toUpperCase() : 'PLAIN';\n    if(supportedTypes.indexOf(type) < 0){\n        cb('Unsupported login type', 451);\n    }\n    switch(type){\n        case 'PLAIN':\n            var buf = new Buffer(username + \"\\0\" + username + \"\\0\" + password);\n            self._write(\"AUTH PLAIN \" + buf.toString(\"base64\") + \"\\r\\n\", cb);\n            break;\n        case \"LOGIN\":\n\t\tcase \"CRAM-MD5\":\n            self.authtype = type;\n            self.username = username;\n            self.password = password;\n            self._write(\"AUTH \" + type + \"\\r\\n\", function(err,code,lines){\n                if(err){\n                    cb(err,code,lines);\n                    return true;\n                }\n                if(code != 334){\n                    cb(type+' Auth Failed',code,lines);\n                    return true;\n                }\n                switch (self.authtype) {\n                    case \"LOGIN\":\n                        var buf = new Buffer(self.username);\n                        self._write(buf.toString(\"base64\") + \"\\r\\n\");\n                        self.queue.push(function(erro,code,lines){\n                            if(erro){\n                                cb(erro,code,lines);\n                                return true;\n                            }\n                            if(code != 334){\n                                cb('LOGIN Auth Failed at username',code,lines);\n                                return true;\n                            }\n                            var buf = new Buffer(self.password);\n                            self._write(buf.toString(\"base64\") + \"\\r\\n\", cb);\n                        });\n                        break;\n                    case \"CRAM-MD5\":\n                        var hmac = crypto.createHmac('md5', self.password);\n                        msg = (new Buffer(msg, \"base64\")).toString(\"ascii\");\n                        hmac.update(msg);\n                        self._write(\n                            (new Buffer(self.username + \" \"\n                            + hmac.digest(\"hex\")).toString(\"base64\")) + \"\\r\\n\",\n                            cb\n                        );\n                        break;\n                }\n            });\n    }\n};\n\nClient.prototype.helo = function (hostname, cb) {\n    var self = this;\n    \n    if (typeof hostname === 'function') {\n        cb = hostname;\n        hostname = undefined;\n    }\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    this._write(\n        'HELO'\n        + (hostname !== undefined ? ' ' + hostname : '')\n        + '\\r\\n',\n        cb\n    );\n    this.hostname = hostname;\n};\n\nClient.prototype.ehlo = function (hostname, cb) {\n    var self = this;\n    \n    if (typeof hostname === 'function') {\n        cb = hostname;\n        hostname = undefined;\n    }\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    this.hostname = hostname;\n    this._write(\n        'EHLO'\n        + (hostname !== undefined ? ' ' + hostname : '')\n        + '\\r\\n',\n        cb\n    );\n};\n\nClient.prototype.startTLS = function (opts, cb) {\n    var self = this;\n    \n    if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n    }\n    opts = copy(opts || {});\n    \n    if (!opts.servername) {\n        opts.servername = opts.hostname || self.hostname;\n    }\n    opts.socket = self.stream;\n    \n    this._write('STARTTLS\\r\\n', function (err) {\n        if (err) return self.emit('error', err);\n        if (cb) cb.apply(this, arguments);\n        \n        self.stream = tls.connect(opts, function (err) {\n            if (err) self.emit('error', err)\n            else self.emit('tls')\n        });\n        self.stream.on('error', function (err) {\n            self.emit('error', err);\n        });\n    });\n};\n\nClient.prototype.verify = function (username, cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    this._write('VRFY ' + username + '\\r\\n', cb);\n};\n\nClient.prototype.to = function (addr, ext, cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    if (typeof ext === 'function') {\n        cb = ext;\n        ext = undefined;\n    }\n    this._write(\n        'RCPT TO:<' + addr + '>'\n        + (ext ? ' ' + ext : '')\n        + '\\r\\n',\n        cb\n    );\n};\n\nClient.prototype.from = function (addr, ext, cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    if (typeof ext === 'function') {\n        cb = ext;\n        ext = undefined;\n    }\n    this._write(\n        'MAIL FROM:<' + addr + '>'\n        + (ext ? ' ' + ext : '')\n        + '\\r\\n',\n        cb\n    );\n};\n\nClient.prototype.data = function (cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    \n    this._write('DATA\\r\\n', cb);\n};\n\nClient.prototype.message = function (source, cb) {\n    var self = this;\n    if (!cb) cb = function (err) {\n        if (err) self.emit('error', err)\n    };\n    \n    var newline = true;\n    \n    if (!source || typeof source === 'function') {\n        cb = source;\n        source = through();\n    }\n    var tr = through(null, end);\n    tr.pause();\n    \n    self._write(dot(source).pipe(tr), cb);\n    \n    return source;\n    \n    function end () {\n        this.queue('\\r\\n.\\r\\n');\n    }\n};\n\nClient.prototype.quit = function (cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    this._write('QUIT\\r\\n', cb);\n};\n\nClient.prototype.reset = function (cb) {\n    var self = this;\n    if (!cb) cb = function (err) { if (err) self.emit('error', err) };\n    this._write('RSET\\r\\n', cb);\n};\n","/home/travis/build/npmtest/node-npmtest-smtp-protocol/node_modules/smtp-protocol/lib/server/parser.js":"module.exports = function (stream, cb) {\n    return new ServerParser(stream, cb);\n};\n\nfunction ServerParser (stream, cb) {\n    this.stream = stream;\n    this.bytes = 0;\n    this.target = null;\n    \n    this.parseLines(cb);\n}\n\nServerParser.prototype = require('../parse_data');\n\nServerParser.prototype.getBytes = function (n, target) {\n    this.bytes = n;\n    this.target = target;\n};\n\nServerParser.prototype.parseLines = function (cb) {\n    var self = this;\n    var continuation = null;\n    \n    self.parseData(function (line) {\n        var m = line.match(/^(\\d+)(?:([- ])(.+))?$/);\n        var code = m && parseInt(m[1], 10);\n        \n        if (!m) {\n            cb(new Error('syntax error parsing: ' + line));\n        }\n        else if (continuation) {\n            if (code !== continuation.code) {\n                cb(new Error('inconsistent code in line continuation'));\n            }\n            else {\n                continuation.lines.push(m[3]);\n                if (m[2] !== '-') {\n                    cb(null, continuation.code, continuation.lines);\n                    continuation = null;\n                }\n            }\n        }\n        else if (m[2] === '-') {\n            continuation = { code : code, lines : [ m[3] ] };\n        }\n        else if (m[3] === undefined) {\n            cb(null, code, []);\n        }\n        else cb(null, code, [ m[3] ]);\n    });\n}\n"}